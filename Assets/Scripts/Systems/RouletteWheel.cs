using System.Collections;
using UnityEngine;
using UnityEngine.UI;

namespace LostAndFound.Systems
{
    /// <summary>
    /// –°–ö–†–ò–ü–¢ –ö–û–õ–ï–°–ê –†–£–õ–ï–¢–ö–ò - —Ç–æ–ª—å–∫–æ –≤—Ä–∞—â–µ–Ω–∏–µ –∏ —à–∞—Ä–∏–∫
    /// –í–µ—à–∞–µ—Ç—Å—è –Ω–∞ GameObject –∫–æ–ª–µ—Å–∞ —Ä—É–ª–µ—Ç–∫–∏
    /// </summary>
    public class RouletteWheel : MonoBehaviour
    {
        [Header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–µ—Å–∞")]
        public Transform wheelTransform; // Transform –∫–æ–ª–µ—Å–∞ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è
        public float minSpinTime = 3f; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è
        public float maxSpinTime = 6f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è
        public AnimationCurve spinCurve = AnimationCurve.EaseInOut(0, 1, 1, 0); // –ö—Ä–∏–≤–∞—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è

        [Header("üéØ –°–¢–†–ï–õ–û–ß–ö–ê")]
        public RectTransform arrowImage; // Image —Å—Ç—Ä–µ–ª–æ—á–∫–∏ (–Ω–∞–∑–Ω–∞—á—å –≤ Inspector)
        public float arrowSpeed = 720f; // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–æ—á–∫–∏ (–≥—Ä–∞–¥/—Å–µ–∫)
        public float arrowRadius = 5.0f; // –†–∞–¥–∏—É—Å –¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∫–æ–ª–µ—Å–∞
        public AnimationCurve arrowCurve = AnimationCurve.EaseInOut(0, 1, 1, 0.2f); // –ö—Ä–∏–≤–∞—è —Å—Ç—Ä–µ–ª–æ—á–∫–∏
        public float arrowScale = 1f; // –†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–æ—á–∫–∏




        [Header("–ß–∏—Å–ª–∞ –Ω–∞ –∫–æ–ª–µ—Å–µ (–ø–æ –ø–æ—Ä—è–¥–∫—É)")]
        public int[] wheelNumbers = { 0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26 };

        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        private bool isSpinning = false;
        private float currentWheelRotation = 0f;
        
        // üéØ –ü–õ–ê–í–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø
        private float targetWheelRotation = 0f;
        private float animationProgress = 0f;
        private bool isAnimating = false;
        private int targetBallNumber = 0;

        void Start()
        {
            // üîç –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–õ–ï–°–û
            if (wheelTransform == null)
            {
                Debug.LogError("[RouletteWheel] ‚ùå –ö–æ–ª–µ—Å–æ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ! –ù–∞–∑–Ω–∞—á—å Transform –∫–æ–ª–µ—Å–∞ –≤ Inspector!");
            }
            else
            {
                Debug.Log($"[RouletteWheel] ‚úÖ –ö–æ–ª–µ—Å–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {wheelTransform.name}");
            }

            // üîç –ü–†–û–í–ï–†–Ø–ï–ú –°–¢–†–ï–õ–û–ß–ö–£
            if (arrowImage == null)
            {
                Debug.LogError("[RouletteWheel] ‚ùå –°—Ç—Ä–µ–ª–æ—á–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞! –ù–∞–∑–Ω–∞—á—å Image —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –≤ Inspector!");
            }
            else
            {
                Debug.Log($"[RouletteWheel] ‚úÖ –°—Ç—Ä–µ–ª–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: {arrowImage.name}");
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –í–û–ö–†–£–ì –∫–æ–ª–µ—Å–∞
                SetupArrowInitialPosition();
            }

            Debug.Log("[RouletteWheel] üé∞ –†—É–ª–µ—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        }
        
        void Update()
        {
            // üéØ –ü–õ–ê–í–ù–ê–Ø –ê–ù–ò–ú–ê–¶–ò–Ø –ö–û–õ–ï–°–ê
            if (isAnimating)
            {
                animationProgress += Time.deltaTime * arrowSpeed / 360f; // –ü–ª–∞–≤–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                
                if (animationProgress >= 1f)
                {
                    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                    isAnimating = false;
                    isSpinning = false;
                    animationProgress = 1f;
                    
                    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ–ª–µ—Å–∞
                    currentWheelRotation = targetWheelRotation;
                    
                    if (wheelTransform != null)
                    {
                        wheelTransform.rotation = Quaternion.Euler(0, 0, currentWheelRotation);
                    }
                    
                    Debug.Log($"[RouletteWheel] üèÜ –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç: {targetBallNumber}");
                    
                    // ‚è±Ô∏è –ü–ê–£–ó–ê 5 –°–ï–ö–£–ù–î
                    StartCoroutine(ShowResultAfterDelay(targetBallNumber));
                }
                else
                {
                    // –ü–ª–∞–≤–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫–æ–ª–µ—Å–∞
                    float wheelCurveValue = spinCurve.Evaluate(animationProgress);
                    currentWheelRotation = Mathf.Lerp(0f, targetWheelRotation, wheelCurveValue);
                    
                    if (wheelTransform != null)
                    {
                        wheelTransform.rotation = Quaternion.Euler(0, 0, currentWheelRotation);
                    }
                }
            }
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å—Ç—Ä–µ–ª–æ—á–∫–∏
        /// </summary>
        void SetupArrowInitialPosition()
        {
            if (arrowImage == null) return;
            
            Debug.Log("[RouletteWheel] üéØ –°—Ç—Ä–µ–ª–æ—á–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é");
        }



        // –£–¥–∞–ª–µ–Ω –º–µ—Ç–æ–¥ FindExistingBall - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ Inspector

        // –£–¥–∞–ª–µ–Ω –º–µ—Ç–æ–¥ SetupBallEffects - —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ —Å–∞–º–æ–º —à–∞—Ä–∏–∫–µ

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–≤–Ω–æ–µ –¥–≤–æ–π–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (–∫–æ–ª–µ—Å–æ + —Å—Ç—Ä–µ–ª–æ—á–∫–∞)
        /// </summary>
        public void SpinWheel(System.Action<int> onResult)
        {
            if (isSpinning || isAnimating)
            {
                Debug.LogWarning("[RouletteWheel] –ö–æ–ª–µ—Å–æ —É–∂–µ –∫—Ä—É—Ç–∏—Ç—Å—è!");
                return;
            }

            // üé≤ –ì–ï–ù–ï–†–ò–†–£–ï–ú –°–õ–£–ß–ê–ô–ù–û–ï –ß–ò–°–õ–û (0-36)
            int resultNumber = Random.Range(0, 37);
            targetBallNumber = resultNumber;
            Debug.Log($"[RouletteWheel] üé∞ –ù–∞—á–∏–Ω–∞—é –ø–ª–∞–≤–Ω–æ–µ –¥–≤–æ–π–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ! –í—ã–ø–∞–¥–µ—Ç —á–∏—Å–ª–æ: {resultNumber}");
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
            StartPlaftAnimation(resultNumber, onResult);
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∫–æ–ª–µ—Å–∞
        /// </summary>
        void StartPlaftAnimation(int resultNumber, System.Action<int> onResult)
        {
            isSpinning = true;
            isAnimating = true;
            animationProgress = 0f;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É–≥–æ–ª –∫–æ–ª–µ—Å–∞
            float targetAngle = CalculateAngleForNumber(resultNumber);
            targetWheelRotation = targetAngle + (Random.Range(3, 6) * 360f);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
            this.onResultCallback = onResult;
            
            Debug.Log($"[RouletteWheel] üé∞ –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫–æ–ª–µ—Å–∞ –∑–∞–ø—É—â–µ–Ω–∞! –¶–µ–ª—å: {resultNumber}");
        }
        
        /// <summary>
        /// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        /// </summary>
        IEnumerator ShowResultAfterDelay(int resultNumber)
        {
            Debug.Log("[RouletteWheel] ‚è±Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");
            yield return new WaitForSeconds(5f);
            
            // –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            onResultCallback?.Invoke(resultNumber);
        }
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è callback
        private System.Action<int> onResultCallback;
        


        // –°–¢–ê–†–´–ï –ú–ï–¢–û–î–´ –ê–ù–ò–ú–ê–¶–ò–ò –®–ê–†–ò–ö–ê –£–î–ê–õ–ï–ù–´
        // –¢–µ–ø–µ—Ä—å –∞–Ω–∏–º–∞—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º RouletteBall

        // –°–¢–ê–†–´–ï –ú–ï–¢–û–î–´ PlaceBallAtNumber –ò GTA5BallLandingAnimation –£–î–ê–õ–ï–ù–´
        // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ RouletteBall.cs



        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –∫–æ–ª–µ—Å–µ
        /// </summary>
        float CalculateAngleForNumber(int number)
        {
            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ
            int index = System.Array.IndexOf(wheelNumbers, number);
            if (index == -1)
            {
                Debug.LogError($"[RouletteWheel] –ß–∏—Å–ª–æ {number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ wheelNumbers!");
                return 0f;
            }

            // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª (360¬∞ / 37 —á–∏—Å–µ–ª)
            float anglePerSegment = 360f / wheelNumbers.Length;
            float angle = index * anglePerSegment;
            
            Debug.Log($"[RouletteWheel] üéØ –ß–∏—Å–ª–æ {number} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {index}, —É–≥–æ–ª: {angle}");
            return angle;
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫—Ä—É—Ç–∏—Ç—Å—è –ª–∏ –∫–æ–ª–µ—Å–æ
        /// </summary>
        public bool IsSpinning()
        {
            return isSpinning;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É–≥–æ–ª –∫–æ–ª–µ—Å–∞
        /// </summary>
        public float GetCurrentRotation()
        {
            return currentWheelRotation;
        }

        /// <summary>
        /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª–æ—á–∫—É –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        /// </summary>
        public void ResetArrow()
        {
            if (arrowImage != null)
            {
                Debug.Log("[RouletteWheel] üîÑ –°—Ç—Ä–µ–ª–æ—á–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞");
            }
        }



        /// <summary>
        /// –†–∏—Å—É–µ—Ç –∫—Ä—É–≥ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        /// </summary>
        void OnDrawGizmos()
        {
            // –†–∏—Å—É–µ–º –∫—Ä—É–≥ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —Å—Ç—Ä–µ–ª–æ—á–∫–∏
            Gizmos.color = Color.yellow;
            DrawWireCircle(transform.position, arrowRadius);
        }
        
        /// <summary>
        /// –†–∏—Å—É–µ—Ç –ø—Ä–æ–≤–æ–ª–æ—á–Ω—ã–π –∫—Ä—É–≥ —Å –ø–æ–º–æ—â—å—é Gizmos
        /// </summary>
        void DrawWireCircle(Vector3 center, float radius)
        {
            int segments = 32;
            float angleStep = 360f / segments;
            Vector3 prevPoint = center + new Vector3(radius, 0, 0);
            
            for (int i = 1; i <= segments; i++)
            {
                float angle = i * angleStep * Mathf.Deg2Rad;
                Vector3 newPoint = center + new Vector3(Mathf.Cos(angle) * radius, Mathf.Sin(angle) * radius, 0);
                Gizmos.DrawLine(prevPoint, newPoint);
                prevPoint = newPoint;
            }
        }
    }
}
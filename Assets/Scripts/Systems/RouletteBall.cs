using UnityEngine;
using System.Collections;

namespace LostAndFound.Systems
{
    /// <summary>
    /// üé∞ –°–∫—Ä–∏–ø—Ç –¥–ª—è —à–∞—Ä–∏–∫–∞ —Ä—É–ª–µ—Ç–∫–∏ (GTA 5 —Å—Ç–∏–ª—å)
    /// –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∫—Ä–∞—Å–∏–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–∞–¥–µ–Ω–∏—è
    /// </summary>
    public class RouletteBall : MonoBehaviour
    {
        [Header("üé∞ –ù–ê–°–¢–†–û–ô–ö–ò –®–ê–†–ò–ö–ê")]
        public float ballRadius = 1.2f; // –†–∞–¥–∏—É—Å –¥–≤–∏–∂–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –∫–æ–ª–µ—Å–∞
        public float ballSpeed = 8f; // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
        public float ballHeight = 0.5f; // –í—ã—Å–æ—Ç–∞ –Ω–∞–¥ –∫–æ–ª–µ—Å–æ–º
        public float ballSize = 0.15f; // –†–∞–∑–º–µ—Ä —à–∞—Ä–∏–∫–∞
        
        [Header("üé® –ê–ù–ò–ú–ê–¶–ò–Ø")]
        public float spinDuration = 4f; // –í—Ä–µ–º—è –∫—Ä—É—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
        public float fallDuration = 2f; // –í—Ä–µ–º—è –ø–∞–¥–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
        public AnimationCurve spinCurve = AnimationCurve.EaseInOut(0, 1, 1, 0.2f); // –ö—Ä–∏–≤–∞—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
        public AnimationCurve fallCurve = AnimationCurve.EaseInOut(0, 0, 1, 1); // –ö—Ä–∏–≤–∞—è –ø–∞–¥–µ–Ω–∏—è
        
        [Header("üéµ –≠–§–§–ï–ö–¢–´")]
        public AudioSource rollSound; // –ó–≤—É–∫ –∫–∞—á–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        public ParticleSystem sparks; // –ò—Å–∫—Ä—ã –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        [Header("üìπ –ö–ê–ú–ï–†–ê –î–õ–Ø –í–ò–î–ò–ú–û–°–¢–ò")]
        public Camera ballCamera; // –ö–∞–º–µ—Ä–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —à–∞—Ä–∏–∫–∞ (–Ω–∞–∑–Ω–∞—á—å –≤ Inspector)
        public RenderTexture ballRenderTexture; // RenderTexture –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        public int renderTextureSize = 256; // –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã
        
        [Header("üé≤ –ß–ò–°–õ–ê –ù–ê –ö–û–õ–ï–°–ï")]
        public int[] wheelNumbers = { 0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26 };
        
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        private Transform rouletteCenter; // –¶–µ–Ω—Ç—Ä –∫–æ–ª–µ—Å–∞ —Ä—É–ª–µ—Ç–∫–∏
        private bool isSpinning = false;
        private bool isFalling = false;
        private float currentAngle = 0f;
        private float currentSpinRotation = 0f;
        private Renderer ballRenderer;
        private Vector3 startPosition;
        
        // Callback –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        private System.Action<int> onResultCallback;
        
        void Start()
        {
            // –ü–æ–ª—É—á–∞–µ–º Renderer
            ballRenderer = GetComponent<Renderer>();
            if (ballRenderer == null)
            {
                Debug.LogError("[RouletteBall] ‚ùå –ù–µ—Ç Renderer –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!");
                return;
            }
            
            // üìπ –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ö–ê–ú–ï–†–£ –î–õ–Ø –í–ò–î–ò–ú–û–°–¢–ò
            SetupBallCamera();
            
            // üéØ –ù–ê–•–û–î–ò–ú –¶–ï–ù–¢–† –†–£–õ–ï–¢–ö–ò
            FindRouletteCenter();
            
            // üé® –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú –ú–ê–¢–ï–†–ò–ê–õ
            SetupBallMaterial();
            
            // üìê –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –†–ê–ó–ú–ï–†
            transform.localScale = Vector3.one * ballSize;
            
            // üìç –ù–ê–ß–ê–õ–¨–ù–ê–Ø –ü–û–ó–ò–¶–ò–Ø
            SetStartPosition();
            
            // üî¥ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –í–ò–î–ò–ú–û–°–¢–¨
            ForceVisibility();
            
            Debug.Log("[RouletteBall] üé∞ –®–∞—Ä–∏–∫ —Å –∫–∞–º–µ—Ä–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        }
        
        /// <summary>
        /// –ò—â–µ—Ç —Ü–µ–Ω—Ç—Ä —Ä—É–ª–µ—Ç–∫–∏ (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å RouletteWheel)
        /// </summary>
        void FindRouletteCenter()
        {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç
            if (transform.parent != null)
            {
                rouletteCenter = transform.parent;
                Debug.Log($"[RouletteBall] üéØ –¶–µ–Ω—Ç—Ä —Ä—É–ª–µ—Ç–∫–∏: {rouletteCenter.name} (—Ä–æ–¥–∏—Ç–µ–ª—å)");
                return;
            }
            
            // –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å RouletteWheel –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
            RouletteWheel rouletteWheel = FindObjectOfType<RouletteWheel>();
            if (rouletteWheel != null)
            {
                rouletteCenter = rouletteWheel.transform;
                Debug.Log($"[RouletteBall] üéØ –¶–µ–Ω—Ç—Ä —Ä—É–ª–µ—Ç–∫–∏: {rouletteCenter.name} (–Ω–∞–π–¥–µ–Ω RouletteWheel)");
                return;
            }
            
            // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–∫ —Ü–µ–Ω—Ç—Ä
            rouletteCenter = transform;
            Debug.LogWarning("[RouletteBall] ‚ö†Ô∏è –¶–µ–Ω—Ç—Ä —Ä—É–ª–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é");
        }
        
        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞–º–µ—Ä—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ —à–∞—Ä–∏–∫–∞
        /// </summary>
        void SetupBallCamera()
        {
            if (ballCamera == null)
            {
                // –ò—â–µ–º –∫–∞–º–µ—Ä—É —Å—Ä–µ–¥–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                ballCamera = GetComponentInChildren<Camera>();
                if (ballCamera == null)
                {
                    Debug.LogWarning("[RouletteBall] ‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–µ—ë");
                    return;
                }
            }
            
            // üé• –°–û–ó–î–ê–ï–ú RENDER TEXTURE
            if (ballRenderTexture == null)
            {
                ballRenderTexture = new RenderTexture(renderTextureSize, renderTextureSize, 24);
                ballRenderTexture.name = "BallRenderTexture";
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
            ballCamera.targetTexture = ballRenderTexture;
            ballCamera.backgroundColor = Color.clear; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            ballCamera.clearFlags = CameraClearFlags.SolidColor;
            ballCamera.cullingMask = -1; // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–∏
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ —à–∞—Ä–∏–∫
            ballCamera.transform.localPosition = new Vector3(0, 0, -1f);
            ballCamera.transform.LookAt(transform);
            
            Debug.Log("[RouletteBall] üìπ –ö–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Å RenderTexture");
        }
        
        /// <summary>
        /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ—Ç —à–∞—Ä–∏–∫ –≤–∏–¥–∏–º—ã–º
        /// </summary>
        void ForceVisibility()
        {
            // üî¥ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –í–ò–î–ò–ú–û–°–¢–¨
            gameObject.layer = 0; // Default —Å–ª–æ–π
            gameObject.SetActive(true);
            
            if (ballRenderer != null)
            {
                ballRenderer.enabled = true;
                ballRenderer.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;
                ballRenderer.receiveShadows = true;
            }
            
            // üéØ –Ø–†–ö–ò–ô –¶–í–ï–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
            if (ballRenderer != null && ballRenderer.material != null)
            {
                ballRenderer.material.color = Color.yellow; // –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            }
            
            Debug.Log($"[RouletteBall] üî¥ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å: –ø–æ–∑–∏—Ü–∏—è={transform.position}, –∞–∫—Ç–∏–≤–µ–Ω={gameObject.activeInHierarchy}");
        }

        /// <summary>
        /// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —à–∞—Ä–∏–∫–∞
        /// </summary>
        void SetupBallMaterial()
        {
            Material ballMaterial = new Material(Shader.Find("Standard"));
            if (ballMaterial.shader == null)
            {
                ballMaterial = new Material(Shader.Find("Legacy Shaders/Diffuse"));
            }
            
            // üé® –Ø–†–ö–û-–ñ–ï–õ–¢–´–ô –®–ê–†–ò–ö –î–õ–Ø –í–ò–î–ò–ú–û–°–¢–ò
            ballMaterial.color = Color.yellow;
            
            if (ballMaterial.HasProperty("_Metallic"))
                ballMaterial.SetFloat("_Metallic", 0.8f);
            if (ballMaterial.HasProperty("_Smoothness"))
                ballMaterial.SetFloat("_Smoothness", 0.95f);
            
            ballRenderer.material = ballMaterial;
            
            Debug.Log("[RouletteBall] üé® –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }
        
        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —à–∞—Ä–∏–∫–∞
        /// </summary>
        void SetStartPosition()
        {
            if (rouletteCenter == null) return;
            
            startPosition = rouletteCenter.position + new Vector3(ballRadius, 0, ballHeight);
            transform.position = startPosition;
            
            Debug.Log($"[RouletteBall] üìç –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {startPosition}");
        }
        
        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –∫—Ä—É—á–µ–Ω–∏—è –∏ –ø–∞–¥–µ–Ω–∏—è —à–∞—Ä–∏–∫–∞
        /// </summary>
        public void StartSpin(System.Action<int> onResult = null)
        {
            if (isSpinning || isFalling) return;
            
            onResultCallback = onResult;
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            int resultNumber = wheelNumbers[Random.Range(0, wheelNumbers.Length)];
            
            Debug.Log($"[RouletteBall] üé∞ –ù–∞—á–∏–Ω–∞—é —Å–ø–∏–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç: {resultNumber}");
            
            StartCoroutine(SpinAnimation(resultNumber));
        }
        
        /// <summary>
        /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫—Ä—É—á–µ–Ω–∏—è
        /// </summary>
        IEnumerator SpinAnimation(int resultNumber)
        {
            isSpinning = true;
            float elapsed = 0f;
            
            // üîä –ó–í–£–ö –ö–†–£–ß–ï–ù–ò–Ø
            if (rollSound != null)
            {
                rollSound.Play();
            }
            
            // üåÄ –ö–†–£–ß–ï–ù–ò–ï –í–û–ö–†–£–ì –ö–û–õ–ï–°–ê
            while (elapsed < spinDuration)
            {
                elapsed += Time.deltaTime;
                float progress = elapsed / spinDuration;
                float curveProgress = spinCurve.Evaluate(progress);
                
                // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫—Ä—É–≥—É
                float currentSpeed = ballSpeed * (1 - curveProgress);
                currentAngle += currentSpeed * Time.deltaTime * 100f;
                
                // –ü–æ–∑–∏—Ü–∏—è –ø–æ –∫—Ä—É–≥—É
                Vector3 circlePosition = rouletteCenter.position + new Vector3(
                    Mathf.Cos(currentAngle * Mathf.Deg2Rad) * ballRadius,
                    Mathf.Sin(currentAngle * Mathf.Deg2Rad) * ballRadius,
                    0
                );
                circlePosition.z = ballHeight;
                
                transform.position = circlePosition;
                
                // üå™Ô∏è –í–†–ê–©–ï–ù–ò–ï –®–ê–†–ò–ö–ê
                currentSpinRotation += currentSpeed * Time.deltaTime * 360f;
                transform.rotation = Quaternion.Euler(
                    currentSpinRotation * 0.7f, 
                    currentSpinRotation, 
                    currentSpinRotation * 1.3f
                );
                
                yield return null;
            }
            
            isSpinning = false;
            
            // üéØ –ü–ï–†–ï–•–û–î–ò–ú –ö –ü–ê–î–ï–ù–ò–Æ
            StartCoroutine(FallAnimation(resultNumber));
        }
        
        /// <summary>
        /// –ö–æ—Ä—É—Ç–∏–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è –Ω–∞ —á–∏—Å–ª–æ
        /// </summary>
        IEnumerator FallAnimation(int resultNumber)
        {
            isFalling = true;
            
            Vector3 startPos = transform.position;
            Vector3 endPos = CalculateNumberPosition(resultNumber);
            
            float elapsed = 0f;
            
            Debug.Log($"[RouletteBall] üéØ –ü–∞–¥–∞—é –Ω–∞ —á–∏—Å–ª–æ {resultNumber}");
            
            // ‚ú® –≠–§–§–ï–ö–¢–´ –ü–†–ò –ü–ê–î–ï–ù–ò–ò
            if (sparks != null)
            {
                sparks.Play();
            }
            
            // üèÄ –ê–ù–ò–ú–ê–¶–ò–Ø –ü–ê–î–ï–ù–ò–Ø
            while (elapsed < fallDuration)
            {
                elapsed += Time.deltaTime;
                float progress = elapsed / fallDuration;
                float curveProgress = fallCurve.Evaluate(progress);
                
                // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                Vector3 currentPos = Vector3.Lerp(startPos, endPos, curveProgress);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
                if (progress > 0.7f)
                {
                    float bouncePhase = (progress - 0.7f) / 0.3f;
                    float bounceHeight = Mathf.Sin(bouncePhase * Mathf.PI * 2f) * 0.1f * (1f - bouncePhase);
                    currentPos.z += bounceHeight;
                }
                
                transform.position = currentPos;
                
                // –ó–∞–º–µ–¥–ª—è—é—â–µ–µ—Å—è –≤—Ä–∞—â–µ–Ω–∏–µ
                float spinSpeed = (1f - progress) * 180f * Time.deltaTime;
                currentSpinRotation += spinSpeed;
                transform.rotation = Quaternion.Euler(
                    currentSpinRotation * 0.3f, 
                    currentSpinRotation * 0.7f, 
                    currentSpinRotation
                );
                
                yield return null;
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            transform.position = endPos;
            
            // üîï –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ó–í–£–ö–ò
            if (rollSound != null)
            {
                rollSound.Stop();
            }
            
            if (sparks != null)
            {
                sparks.Stop();
            }
            
            isFalling = false;
            
            Debug.Log($"[RouletteBall] üèÜ –®–∞—Ä–∏–∫ —É–ø–∞–ª –Ω–∞ —á–∏—Å–ª–æ: {resultNumber}");
            
            // –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            onResultCallback?.Invoke(resultNumber);
        }
        
        /// <summary>
        /// –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –∫–æ–ª–µ—Å–µ
        /// </summary>
        Vector3 CalculateNumberPosition(int number)
        {
            // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ
            int index = System.Array.IndexOf(wheelNumbers, number);
            if (index == -1) index = 0; // Fallback
            
            // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª (360 –≥—Ä–∞–¥—É—Å–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª)
            float angle = (360f / wheelNumbers.Length) * index;
            
            // –ü–æ–∑–∏—Ü–∏—è –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É (–≤ "–ª—É–Ω–∫–µ" —á–∏—Å–ª–∞)
            Vector3 numberPosition = rouletteCenter.position + new Vector3(
                Mathf.Cos(angle * Mathf.Deg2Rad) * ballRadius * 0.7f,
                Mathf.Sin(angle * Mathf.Deg2Rad) * ballRadius * 0.7f,
                0
            );
            numberPosition.z = ballHeight * 0.3f; // –ù–∏–∂–µ, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –ª—É–Ω–∫–µ
            
            return numberPosition;
        }
        
        /// <summary>
        /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —à–∞—Ä–∏–∫ –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        /// </summary>
        public void ResetPosition()
        {
            if (isSpinning || isFalling) return;
            
            transform.position = startPosition;
            transform.rotation = Quaternion.identity;
            currentAngle = 0f;
            currentSpinRotation = 0f;
            
            Debug.Log("[RouletteBall] üîÑ –ü–æ–∑–∏—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞");
        }
        
        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫—Ä—É—Ç–∏—Ç—Å—è –ª–∏ —à–∞—Ä–∏–∫
        /// </summary>
        public bool IsAnimating()
        {
            return isSpinning || isFalling;
        }
    }
}